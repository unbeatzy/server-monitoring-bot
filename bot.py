import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, Bot
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, JobQueue

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
TOKEN = 'your_bot_token'

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
NOTIFY_USER_ID = 'your_chat_id'

# IP –∏–ª–∏ –¥–æ–º–µ–Ω—ã –≤–∞—à–∏—Ö VPS —Å–µ—Ä–≤–µ—Ä–æ–≤
SERVERS = {
    'TUR, ANR': '1.2.3.4',
    'GER, BRL': '5.6.7.8',
    'USA, NY': '9.10.11.12'
}

server_statuses = {name: True for name in SERVERS}

async def check_server_status(context: ContextTypes.DEFAULT_TYPE):
    global server_statuses
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    for name, ip in SERVERS.items():
        logging.info(f"–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ {name} ({ip})...")
        response = os.system(f"ping -c 1 {ip} > /dev/null 2>&1")
        is_online = (response == 0)
        
        if is_online != server_statuses[name]:
            if is_online:
                message = f"üü¢ {name} - —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω"
            else:
                message = f"üî¥ {name} - —Å–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω"
                
            server_statuses[name] = is_online
            
            try:
                logging.info(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {NOTIFY_USER_ID}: {message}")
                bot = Bot(token=TOKEN)
                await bot.send_message(chat_id=NOTIFY_USER_ID, text=message)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def get_all_servers_status():
    statuses = []
    logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    for name, ip in SERVERS.items():
        logging.info(f"–ü–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞ {name} ({ip})...")
        response = os.system(f"ping -c 1 {ip} > /dev/null 2>&1")
        if response == 0:
            statuses.append(f"üü¢ {name}")
        else:
            statuses.append(f"üî¥ {name}")
    return "\n".join(statuses)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.chat_id}")
    status_report = get_all_servers_status()
    await update.message.reply_text(status_report)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.chat_id}")
    keyboard = [[KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Å–µ—Ä–≤–∏—Å–∞ @beatVPN_bot, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø–æ–¥–∫–ª—é—á–∞–µ—Ç–µ—Å—å.\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —è –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–∞—à–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏—Å–ª–∞–ª –∏—Ö —Å—Ç–∞—Ç—É—Å—ã. üôÇ", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤":
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.chat_id}")
        await status_command(update, context)

def main():
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ JobQueue –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    job_queue = application.job_queue
    job_queue.run_repeating(check_server_status, interval=15, first=0)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler('status', status_command))

    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
